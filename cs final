"""
Purpose:
-----------
This program was written to gather information from a website, and compare the price and rating 
of each product under the section that customer wants. 

Authors:
-----------
Yuqi Zhu and Allan Wang
"""

# Import and shorten names
import matplotlib as mpl
import matplotlib.pyplot as plt
import requests # library for scraping a web page
from bs4 import BeautifulSoup # library for getting data out of HTML

# The path to the jobs functionality of the website
baseurl = 'https://www.thecubicle.com'

# Create empty lists
productlinks = []
bundle_links = []
name_list = []
price_list = []
rating_list = []

# For loop to get information of each product
for x in range(1,2):
    # send a GET request to the specified url and return a response object
    r = requests.get(f'https://www.thecubicle.com/search?page={x}&q=mgc') #f string so can get all pages


    # get the content of the response, and use BeautifulSoup to extract elements
    soup = BeautifulSoup(r.content,'lxml') 
    
    # select the sepecific HTML elements by uing the selector 
    productlist = soup.find_all('div', class_ = 'grid-item large--one-fifth medium--one-third small--one-half')

    # iterate through the productlist 
    for item in productlist:
        # find the specific link of the product, so can get into the info page
        # method to return a list of products
        for link in item.find_all('a', href=True):
            productlinks.append(baseurl + link['href'])


# For loop to find the name, rating and price of each product and append them to lists
for link in productlinks:
    r = requests.get(link)
    soup = BeautifulSoup(r.content, 'lxml')

# Name
    name = soup.find('h1', itemprop = 'name').text #convert to a string

    name_list.append(name)


# Rating

    html = soup.find('div',class_ = 'jdgm-rev-widg__summary')
    soup1 = BeautifulSoup(str(html), 'lxml')
    f = soup1.find('div', 'jdgm-rev-widg__summary-stars')
    rating1 = f['aria-label']
    rating = float(rating1[19:23]) # convert to float
    rating_list.append(rating)


# Price
    # find the bundle price
    if "Bundle" in name:
        bundle_links = []
        bundle_list = soup.find_all('div', class_ = 'bundle-item-grid-item grid-item large--one-third medium--one-half')
        for item in bundle_list:
            for link in item.find_all('a', href=True):
                bundle_links.append(baseurl + link['href'])
        
        price = 0
        for link in bundle_links:
            r = requests.get(link)
            soup1 = BeautifulSoup(r.content, 'lxml')
            individual_price= soup1.find('span', class_ = 'visually-hidden').text
            individual_price1 = individual_price[1:]
            individual_price2 = float(individual_price1) * 0.9
            individual_price2 = round(individual_price2, 2)
            price += individual_price2

    else:
        price1 = soup.find('span', class_ = 'visually-hidden').text
        price = float(price1[1:])
    
    price_list.append(price)

# Functions to put two lists into a dictionary
price_dic = dict(zip(name_list, price_list))
rating_dic = dict(zip(name_list, rating_list))

sorted_price = sorted(price_dic.items(), key=lambda x:x[1])
sorted_rating = sorted(rating_dic.items(), key=lambda x:x[1], reverse = True)

# Function for sorting products by price
def price_ascending():
    """
    Purpose:
    -----------
    Using the sorted() and the lambda function to sort the dictionary by the key: price and 
    using the for loop to print each pair of names and the price values in seperate lines

    For loop:
    -----------
    A for loop was used to go through every single element in the sorted tuple and print each value 
    """


    for item in sorted_price:     
        print(item[0] + ': $' + str(item[1])) #tuple

# Sorted by rating function
def rating_decending():
    """
    Purpose:
    -----------
    Using the sorted() and the lambda function to sort the dictionary by the key: rating and 
    using the for loop to print each pair of names and ratings in seperate lines

    For loop:
    -----------
    A for loop was used to go through every single element in the sorted tuple and print each value 
    """


    for item in sorted_rating:
        print(item[0] + ': ' + str(item[1]) + 'stars')


# Get the user input
user_input = input('Do you wanna sort by price (low to high) or rating (high to low)?')

if user_input == 'price':
    price_ascending()

else:
    rating_decending()


# Plotting
labels = ['YJ MGC']
plt.boxplot(price_list, vert = False, labels = labels)
plt.xlabel('Price ($)')
plt.title("Price of YJ Mgc")
plt.show()

"""
The plotting and the graphs

With the lists that we filled in during the for loop, we can plot those according points. 
Labels and title were used.
"""
